
/********************************************************
*
*	This program demonstrate the concept of Abstract class
*
*	1.	pure virtual function in c++ is same as abstract 
*		method in java.
*	2.	if a class contains abstract method or abstract 
*		class we cannot instantiate that class
*		i.e we cannot create object of that class
*	3. 	if a class contains abstract method then it is must to 
*		provide defination for that method in derived class
*
*	4. Abstract class can contain both abstract methods and
*		concrete methods.
********************************************************/


import java.lang.*;

abstract class Base
{
	int i;
	
	
	
	public abstract void gun();		// abstract method of class
 	
	Base()
	{
		i = 10;
		System.out.println("In abstract class constructor");
	}

	// abstract class can contain concrete method also
	void fun()
	{
		System.out.println("In Base fun");
	}
}

class Derived extends Base
{
	Derived()
	{
			System.out.println("In derived class constructor");

	}
	public void gun()
	{
		System.out.println("In gun of Derived");
		System.out.println("Value of i : "+i);
	}

	// Derived class can extend the methods of abstract class
	void fun()
	{
		System.out.println("In Derived fun");
	}
	
}

class Abstract_Class2
{
	public static void main(String args[])
	{	
		System.out.println("The following output is generated by creating object of derived class\n");

		Derived dobj = new Derived();
		dobj.fun();		// fun() of derived gets called 
		dobj.gun();		// gun() of derived gets called

		// We can not create object of abstract class
		// but we can create its reference
		
		System.out.println("The following output is generated by upcasting\n");

		Base bobj = new Derived();	// base class reference 								//pointing to derived class object	
		bobj.fun();		// fun() of derived gets called 
		bobj.gun();		// gun() of derived gets called

	}
}

